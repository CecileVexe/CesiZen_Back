// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Citizen {
  id    String  @id @default(uuid())
  clerkId String @unique
  email String  @unique 
  name  String 
  surname String
  role Role @relation(fields: [roleId], references: [id])
  roleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  comment Comment[]
  messages Message[]
  progression Progression[]
  favorites Favorite[]
}

model Role {
  id  String  @id @default(uuid())
  name String @unique
  citizen Citizen[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model Ressource {
  id             String   @id @default(uuid())
  title          String
  description    String
  maxParticipant Int?     
  nbParticipant  Int?     
  deadLine       DateTime?
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     String
  file           File?    @relation(fields: [fileId], references: [id])
  fileId         String?
  banner         Image?   @relation(fields: [bannerId], references: [id])
  bannerId       String?
  step           Step[]
  favorites      Favorite[]
  comment        Comment[]
  isValidate     Boolean
  status         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Category {
  id  String  @id @default(uuid())
  name String @unique
  description String 
  ressources Ressource[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model File {
  id        String    @id @default(uuid())
  path      Bytes
  ressources Ressource[]
}

model Image {
  id        String    @id @default(uuid())
  url       Bytes
  ressources Ressource[]
}

model Comment {
  id  String  @id @default(uuid())
  title String
  description String
  citizen Citizen @relation(fields: [citizenId], references: [id])
  citizenId String
  ressource Ressource @relation(fields:[ressourceId], references :[id])
  ressourceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Step {
  id  String  @id @default(uuid())
  title String
  description String
  order Int
  ressource Ressource @relation(fields: [ressourceId], references: [id])
  ressourceId String
  progression Progression[]
}

model Progression {
  id  String  @id @default(uuid())
  completed Boolean @default(false)
  dateCompleted  DateTime?
  citizen Citizen @relation(fields: [citizenId], references: [id])
  citizenId String
  step Step @relation(fields:[stepId], references : [id])
  stepId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Favorite {
  id String  @id @default(uuid())
  citizen Citizen @relation(fields: [citizenId], references: [id])
  citizenId String
  ressource Ressource @relation(fields: [ressourceId], references: [id])
  ressourceId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([citizenId, ressourceId])
}


model Message {
  id  String  @id @default(uuid())
  title String
  description String
  citizen Citizen @relation(fields: [citizenId], references: [id])
  citizenId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}