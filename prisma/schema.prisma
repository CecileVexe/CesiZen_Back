// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(uuid())
  clerkId String @unique
  email String  @unique 
  name  String 
  surname String
  role Role @relation(fields: [roleId], references: [id])
  roleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  journals   EmotionalJournal[]
  favorites  Favorite[]
}

model Role {
  id  String  @id @default(uuid())
  name String @unique
  user User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


model Article {
  id             String   @id @default(uuid())
  title          String
  content        String 
  category       ArticleCategory @relation(fields: [categoryId], references: [id])
  categoryId     String  
  banner     Image?    @relation(fields: [bannerId], references: [id])
  bannerId   String?   @unique
  favorites      Favorite[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ArticleCategory {
  id String   @id @default(uuid())
  name                String   @db.VarChar(150)
  description         String   @db.VarChar(150)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  articles            Article[]
}

model Image {
  id        String    @id @default(uuid())
  url       Bytes
  articles Article?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Favorite {
  id String  @id @default(uuid())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, articleId])
}

model EmotionCategory {
  id String   @id @default(uuid())
  name                String   @db.VarChar(150)
  color               String   @db.VarChar(150)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  emotions            Emotion[]
}

model EmotionalJournal {
  id String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user       User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries    JournalEntry[]
}

model Emotion {
  id          String   @id @default(uuid())
  name                String   @db.VarChar(150)
  color               String   @db.VarChar(150)
  smiley              String   @db.VarChar(150)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  emotionCategoryId String
  emotionCategory     EmotionCategory @relation(fields: [emotionCategoryId], references: [id])
  entries             JournalEntry[]
}

model JournalEntry {
  id    String   @id @default(uuid())
  description String   @db.Text
  date       DateTime @db.Date
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  emotionId  String
  emotion     Emotion  @relation(fields: [emotionId], references: [id])
  journalId  String
  journal     EmotionalJournal @relation(fields: [journalId], references: [id], onDelete: Cascade)
}